// Generated by Dagger (https://dagger.dev).
package com.app.motus_finance.domain.usecases;

import com.app.motus_finance.data.repositories.RepositoriesDueDates;
import com.app.motus_finance.data.repositories.RepositoriesMarket;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DueDateUseCase_Factory implements Factory<DueDateUseCase> {
  private final Provider<RepositoriesMarket> repositoriesBankProvider;

  private final Provider<RepositoriesDueDates> repositoriesDueDatesProvider;

  public DueDateUseCase_Factory(Provider<RepositoriesMarket> repositoriesBankProvider,
      Provider<RepositoriesDueDates> repositoriesDueDatesProvider) {
    this.repositoriesBankProvider = repositoriesBankProvider;
    this.repositoriesDueDatesProvider = repositoriesDueDatesProvider;
  }

  @Override
  public DueDateUseCase get() {
    return newInstance(repositoriesBankProvider.get(), repositoriesDueDatesProvider.get());
  }

  public static DueDateUseCase_Factory create(Provider<RepositoriesMarket> repositoriesBankProvider,
      Provider<RepositoriesDueDates> repositoriesDueDatesProvider) {
    return new DueDateUseCase_Factory(repositoriesBankProvider, repositoriesDueDatesProvider);
  }

  public static DueDateUseCase newInstance(RepositoriesMarket repositoriesBank,
      RepositoriesDueDates repositoriesDueDates) {
    return new DueDateUseCase(repositoriesBank, repositoriesDueDates);
  }
}

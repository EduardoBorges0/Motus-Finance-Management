// Generated by Dagger (https://dagger.dev).
package com.app.motus_finance.domain.usecases;

import com.app.motus_finance.data.repositories.RepositoriesExpenses;
import com.app.motus_finance.data.repositories.RepositoriesMarket;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class ExpensesUseCases_Factory implements Factory<ExpensesUseCases> {
  private final Provider<RepositoriesExpenses> repositoriesExpensesProvider;

  private final Provider<RepositoriesMarket> repositoriesBankProvider;

  public ExpensesUseCases_Factory(Provider<RepositoriesExpenses> repositoriesExpensesProvider,
      Provider<RepositoriesMarket> repositoriesBankProvider) {
    this.repositoriesExpensesProvider = repositoriesExpensesProvider;
    this.repositoriesBankProvider = repositoriesBankProvider;
  }

  @Override
  public ExpensesUseCases get() {
    return newInstance(repositoriesExpensesProvider.get(), repositoriesBankProvider.get());
  }

  public static ExpensesUseCases_Factory create(
      Provider<RepositoriesExpenses> repositoriesExpensesProvider,
      Provider<RepositoriesMarket> repositoriesBankProvider) {
    return new ExpensesUseCases_Factory(repositoriesExpensesProvider, repositoriesBankProvider);
  }

  public static ExpensesUseCases newInstance(RepositoriesExpenses repositoriesExpenses,
      RepositoriesMarket repositoriesBank) {
    return new ExpensesUseCases(repositoriesExpenses, repositoriesBank);
  }
}
